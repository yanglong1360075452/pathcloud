package com.lifetech.dhap.pathcloud.application.domain;

import com.lifetech.dhap.pathcloud.application.application.condition.PathologyCondition;
import com.lifetech.dhap.pathcloud.application.application.condition.PathologyQueryCondition;
import com.lifetech.dhap.pathcloud.application.application.condition.WechatCondition;
import com.lifetech.dhap.pathcloud.application.application.dto.WechatInfoDto;
import com.lifetech.dhap.pathcloud.application.domain.model.Pathology;
import com.lifetech.dhap.pathcloud.application.domain.model.PathologyExpand;
import com.lifetech.dhap.pathcloud.application.domain.model.PathologyQuery;
import com.lifetech.dhap.pathcloud.application.domain.model.ReportInfo;
import org.apache.ibatis.annotations.Param;

import java.util.Date;
import java.util.List;

public interface PathologyRepository {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pathology
     *
     * @mbggenerated Mon Nov 21 17:13:40 CST 2016
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pathology
     *
     * @mbggenerated Mon Nov 21 17:13:40 CST 2016
     */
    int insert(Pathology record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pathology
     *
     * @mbggenerated Mon Nov 21 17:13:40 CST 2016
     */
    Pathology selectByPrimaryKey(Long id);

    Pathology selectByNo(String pathNo);

    Pathology selectByApplicationId(Long applicationId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pathology
     *
     * @mbggenerated Mon Nov 21 17:13:40 CST 2016
     */
    List<Pathology> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pathology
     *
     * @mbggenerated Mon Nov 21 17:13:40 CST 2016
     */
    int updateByPrimaryKey(Pathology record);

    Long last();

    List<PathologyExpand> selectGrossingExpandByCondition(PathologyCondition con);

    Long countGrossingByCondition(PathologyCondition con);

    PathologyExpand selectExpandByPrimaryKey (Long id);

    PathologyExpand selectExpandBySerialNumber (String serialNumber);

    List<PathologyExpand> selectDiagnoseExpandByCondition(PathologyCondition con);
    Long countDiagnoseByCondition(PathologyCondition con);

    ReportInfo selectReportInfoByPathId(long pathId);

    ReportInfo selectLastDiagnoseInfoByPathId(long pathId);

    List<PathologyQuery> selectQueryByCondition(PathologyQueryCondition con);
    Long countQueryByCondition(PathologyQueryCondition con);

    long countByInspectCategory(int code);

    List<PathologyExpand> selectPrepareDiagnose(PathologyCondition condition);
    Long countPrepareDiagnose(PathologyCondition condition);

    List<Pathology> selectReportPic(List<Long> pathIds);

    Pathology selectLastRegisterPathology(@Param("userId") long userId, @Param("createTime") Date createTime);

    List<WechatInfoDto> getMyApplications(WechatCondition con);

    Long getMyApplicationsTotal(WechatCondition con);

    List<WechatInfoDto> getIhcs(Long aiId);

    Integer getNextNumber(String seqName);

    /**
     * 根据住院号查询当天申请产生冰冻的常规病理
     * @param admissionNo
     * @return
     */
    Pathology selectCurrentDayApplyByAdmissionNo(String admissionNo);

    /**
     * 查询病理是否有脱钙的蜡块
     * @param pathId
     * @return
     */
    Boolean decalcify(long pathId);
}